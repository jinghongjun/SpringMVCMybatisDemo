<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd  
            http://www.springframework.org/schema/mvc  
            http://www.springframework.org/schema/mvc/spring-mvc.xsd  
            http://www.springframework.org/schema/context  
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/aop
			http://www.springframework.org/schema/aop/spring-aop.xsd"
       default-lazy-init="true">


    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html;charset=UTF-8</value>
                        <value>application/json</value>
                    </list>
                </property>
                <property name="features">
                    <array>
                        <!--QuoteFieldNames———-输出key时是否使用双引号,默认为true-->
                        <!--WriteMapNullValue——–是否输出值为null的字段,默认为false-->
                        <!--WriteNullNumberAsZero—-数值字段如果为null,输出为0,而非null-->
                        <!--WriteNullListAsEmpty—–List字段如果为null,输出为[],而非null-->
                        <!--WriteNullStringAsEmpty—字符类型字段如果为null,输出为”“,而非null-->
                        <!--WriteNullBooleanAsFalse–Boolean字段如果为null,输出为false,而非null-->
                        <value>WriteMapNullValue</value>
                        <value>WriteNullStringAsEmpty</value>
                        <value>WriteNullNumberAsZero</value>
                        <value>WriteNullListAsEmpty</value>
                        <value>WriteNullBooleanAsFalse</value>
                    </array>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!--mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven -->

    <mvc:interceptors>
        <!--身份验证的拦截器-->
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean id="authorizationInterceptor" class="com.wl.authorization.interceptor.AuthorizationInterceptor">
                <!--验证信息存储的Http头-->
                <property name="httpHeaderName" value="authorization"/>
                <!--验证信息通用前缀，例如Bearer-->
                <property name="httpHeaderPrefix" value=""/>
                <!--验证失败时的错误信息-->
                <property name="unauthorizedErrorMessage" value="令牌失效，请重新登录"/>
                <!--管理验证信息的bean-->
                <property name="manager" ref="tokenService"/>
            </bean>
        </mvc:interceptor>

    </mvc:interceptors>
    <!--Aop Aspectj -->
    <aop:aspectj-autoproxy/>

    <!-- 通过mvc:resources设置静态资源，这样servlet就会处理这些静态资源，而不通过控制器 -->
    <!-- 设置不过滤内容，比如:css,jquery,img 等资源文件 -->
    <mvc:resources location="/" mapping="/**.html"/>
    <mvc:resources location="/css/" mapping="/css/**"/>
    <mvc:resources location="/js/" mapping="/js/**"/>
    <mvc:resources location="/images/" mapping="/images/**"/>
    <mvc:resources location="/static/" mapping="/static/**"/>
    <!-- 添加注解驱动 -->
    <mvc:annotation-driven/>
    <!-- 默认扫描的包路径 -->
    <!--自动扫描含有@Service将其注入为bean -->
    <context:component-scan base-package="com.wl"/>

    <!-- mvc:view-controller可以在不需要Controller处理request的情况，转向到设置的View -->
    <!-- 像下面这样设置，如果请求为/，则不通过controller，而直接解析为/index.jsp -->
    <mvc:view-controller path="/" view-name="index"/>
    <bean class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"></property>
        <!-- 配置jsp路径前缀 -->
        <property name="prefix" value="/WEB-INF/jsp/"></property>
        <!-- 配置URl后缀 -->
        <property name="suffix" value=".jsp"></property>
    </bean>


</beans> 